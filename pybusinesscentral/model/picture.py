# coding: utf-8

"""
    (v2.0) Dynamics 365 Business Central

    (v2.0) Business Central Standard APIs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Picture(BaseModel):
    """
    Picture
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="(v1.0) The id property for the Dynamics 365 Business Central picture entity")
    width: Optional[StrictInt] = Field(default=None, description="(v1.0) The width property for the Dynamics 365 Business Central picture entity")
    height: Optional[StrictInt] = Field(default=None, description="(v1.0) The height property for the Dynamics 365 Business Central picture entity")
    content_type: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="(v1.0) The contentType property for the Dynamics 365 Business Central picture entity", alias="contentType")
    contentodata_media_edit_link: Optional[StrictStr] = Field(default=None, description="(v1.0) The content@odata.mediaEditLink property for the Dynamics 365 Business Central picture entity", alias="content@odata.mediaEditLink")
    contentodata_media_read_link: Optional[StrictStr] = Field(default=None, description="(v1.0) The content@odata.mediaReadLink property for the Dynamics 365 Business Central picture entity", alias="content@odata.mediaReadLink")
    __properties: ClassVar[List[str]] = ["id", "width", "height", "contentType", "content@odata.mediaEditLink", "content@odata.mediaReadLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Picture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        # set to None if content_type (nullable) is None
        # and model_fields_set contains the field
        if self.content_type is None and "content_type" in self.model_fields_set:
            _dict['contentType'] = None

        # set to None if contentodata_media_edit_link (nullable) is None
        # and model_fields_set contains the field
        if self.contentodata_media_edit_link is None and "contentodata_media_edit_link" in self.model_fields_set:
            _dict['content@odata.mediaEditLink'] = None

        # set to None if contentodata_media_read_link (nullable) is None
        # and model_fields_set contains the field
        if self.contentodata_media_read_link is None and "contentodata_media_read_link" in self.model_fields_set:
            _dict['content@odata.mediaReadLink'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Picture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "contentType": obj.get("contentType"),
            "content@odata.mediaEditLink": obj.get("content@odata.mediaEditLink"),
            "content@odata.mediaReadLink": obj.get("content@odata.mediaReadLink")
        })
        return _obj


