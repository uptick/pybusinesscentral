# coding: utf-8

"""
    (v2.0) Dynamics 365 Business Central

    (v2.0) Business Central Standard APIs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pybusinesscentral.model.customer import Customer
from pybusinesscentral.model.general_ledger_entry_dimensions_inner import GeneralLedgerEntryDimensionsInner
from typing import Optional, Set
from typing_extensions import Self

class CustomerPayment(BaseModel):
    """
    CustomerPayment
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="(v1.0) The id property for the Dynamics 365 Business Central customerPayment entity")
    journal_display_name: Optional[StrictStr] = Field(default=None, description="(v1.0) The journalDisplayName property for the Dynamics 365 Business Central customerPayment entity", alias="journalDisplayName")
    line_number: Optional[StrictInt] = Field(default=None, description="(v1.0) The lineNumber property for the Dynamics 365 Business Central customerPayment entity", alias="lineNumber")
    customer_id: Optional[StrictStr] = Field(default=None, description="(v1.0) The customerId property for the Dynamics 365 Business Central customerPayment entity", alias="customerId")
    customer_number: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="(v1.0) The customerNumber property for the Dynamics 365 Business Central customerPayment entity", alias="customerNumber")
    contact_id: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="(v1.0) The contactId property for the Dynamics 365 Business Central customerPayment entity", alias="contactId")
    posting_date: Optional[datetime] = Field(default=None, description="(v1.0) The postingDate property for the Dynamics 365 Business Central customerPayment entity", alias="postingDate")
    document_number: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="(v1.0) The documentNumber property for the Dynamics 365 Business Central customerPayment entity", alias="documentNumber")
    external_document_number: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="(v1.0) The externalDocumentNumber property for the Dynamics 365 Business Central customerPayment entity", alias="externalDocumentNumber")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="(v1.0) The amount property for the Dynamics 365 Business Central customerPayment entity")
    applies_to_invoice_id: Optional[StrictStr] = Field(default=None, description="(v1.0) The appliesToInvoiceId property for the Dynamics 365 Business Central customerPayment entity", alias="appliesToInvoiceId")
    applies_to_invoice_number: Optional[StrictStr] = Field(default=None, description="(v1.0) The appliesToInvoiceNumber property for the Dynamics 365 Business Central customerPayment entity", alias="appliesToInvoiceNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="(v1.0) The description property for the Dynamics 365 Business Central customerPayment entity")
    comment: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="(v1.0) The comment property for the Dynamics 365 Business Central customerPayment entity")
    dimensions: Optional[List[Optional[GeneralLedgerEntryDimensionsInner]]] = None
    last_modified_date_time: Optional[datetime] = Field(default=None, description="(v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central customerPayment entity", alias="lastModifiedDateTime")
    customer: Optional[Customer] = None
    __properties: ClassVar[List[str]] = ["id", "journalDisplayName", "lineNumber", "customerId", "customerNumber", "contactId", "postingDate", "documentNumber", "externalDocumentNumber", "amount", "appliesToInvoiceId", "appliesToInvoiceNumber", "description", "comment", "dimensions", "lastModifiedDateTime", "customer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # set to None if journal_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.journal_display_name is None and "journal_display_name" in self.model_fields_set:
            _dict['journalDisplayName'] = None

        # set to None if line_number (nullable) is None
        # and model_fields_set contains the field
        if self.line_number is None and "line_number" in self.model_fields_set:
            _dict['lineNumber'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if customer_number (nullable) is None
        # and model_fields_set contains the field
        if self.customer_number is None and "customer_number" in self.model_fields_set:
            _dict['customerNumber'] = None

        # set to None if contact_id (nullable) is None
        # and model_fields_set contains the field
        if self.contact_id is None and "contact_id" in self.model_fields_set:
            _dict['contactId'] = None

        # set to None if posting_date (nullable) is None
        # and model_fields_set contains the field
        if self.posting_date is None and "posting_date" in self.model_fields_set:
            _dict['postingDate'] = None

        # set to None if document_number (nullable) is None
        # and model_fields_set contains the field
        if self.document_number is None and "document_number" in self.model_fields_set:
            _dict['documentNumber'] = None

        # set to None if external_document_number (nullable) is None
        # and model_fields_set contains the field
        if self.external_document_number is None and "external_document_number" in self.model_fields_set:
            _dict['externalDocumentNumber'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if applies_to_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.applies_to_invoice_id is None and "applies_to_invoice_id" in self.model_fields_set:
            _dict['appliesToInvoiceId'] = None

        # set to None if applies_to_invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.applies_to_invoice_number is None and "applies_to_invoice_number" in self.model_fields_set:
            _dict['appliesToInvoiceNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if last_modified_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date_time is None and "last_modified_date_time" in self.model_fields_set:
            _dict['lastModifiedDateTime'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "journalDisplayName": obj.get("journalDisplayName"),
            "lineNumber": obj.get("lineNumber"),
            "customerId": obj.get("customerId"),
            "customerNumber": obj.get("customerNumber"),
            "contactId": obj.get("contactId"),
            "postingDate": obj.get("postingDate"),
            "documentNumber": obj.get("documentNumber"),
            "externalDocumentNumber": obj.get("externalDocumentNumber"),
            "amount": obj.get("amount"),
            "appliesToInvoiceId": obj.get("appliesToInvoiceId"),
            "appliesToInvoiceNumber": obj.get("appliesToInvoiceNumber"),
            "description": obj.get("description"),
            "comment": obj.get("comment"),
            "dimensions": [GeneralLedgerEntryDimensionsInner.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None
        })
        return _obj


