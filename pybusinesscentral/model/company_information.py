# coding: utf-8

"""
    (v2.0) Dynamics 365 Business Central

    (v2.0) Business Central Standard APIs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from pybusinesscentral.model.postaladdresstype import Postaladdresstype
from typing import Optional, Set
from typing_extensions import Self

class CompanyInformation(BaseModel):
    """
    CompanyInformation
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="(v1.0) The id property for the Dynamics 365 Business Central companyInformation entity")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="(v1.0) The displayName property for the Dynamics 365 Business Central companyInformation entity", alias="displayName")
    address: Optional[Postaladdresstype] = None
    phone_number: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="(v1.0) The phoneNumber property for the Dynamics 365 Business Central companyInformation entity", alias="phoneNumber")
    fax_number: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="(v1.0) The faxNumber property for the Dynamics 365 Business Central companyInformation entity", alias="faxNumber")
    email: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="(v1.0) The email property for the Dynamics 365 Business Central companyInformation entity")
    website: Optional[Annotated[str, Field(strict=True, max_length=80)]] = Field(default=None, description="(v1.0) The website property for the Dynamics 365 Business Central companyInformation entity")
    tax_registration_number: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="(v1.0) The taxRegistrationNumber property for the Dynamics 365 Business Central companyInformation entity", alias="taxRegistrationNumber")
    currency_code: Optional[StrictStr] = Field(default=None, description="(v1.0) The currencyCode property for the Dynamics 365 Business Central companyInformation entity", alias="currencyCode")
    current_fiscal_year_start_date: Optional[datetime] = Field(default=None, description="(v1.0) The currentFiscalYearStartDate property for the Dynamics 365 Business Central companyInformation entity", alias="currentFiscalYearStartDate")
    industry: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="(v1.0) The industry property for the Dynamics 365 Business Central companyInformation entity")
    picture: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="(v1.0) The picture property for the Dynamics 365 Business Central companyInformation entity")
    last_modified_date_time: Optional[datetime] = Field(default=None, description="(v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central companyInformation entity", alias="lastModifiedDateTime")
    __properties: ClassVar[List[str]] = ["id", "displayName", "address", "phoneNumber", "faxNumber", "email", "website", "taxRegistrationNumber", "currencyCode", "currentFiscalYearStartDate", "industry", "picture", "lastModifiedDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phoneNumber'] = None

        # set to None if fax_number (nullable) is None
        # and model_fields_set contains the field
        if self.fax_number is None and "fax_number" in self.model_fields_set:
            _dict['faxNumber'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if tax_registration_number (nullable) is None
        # and model_fields_set contains the field
        if self.tax_registration_number is None and "tax_registration_number" in self.model_fields_set:
            _dict['taxRegistrationNumber'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['currencyCode'] = None

        # set to None if current_fiscal_year_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.current_fiscal_year_start_date is None and "current_fiscal_year_start_date" in self.model_fields_set:
            _dict['currentFiscalYearStartDate'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if picture (nullable) is None
        # and model_fields_set contains the field
        if self.picture is None and "picture" in self.model_fields_set:
            _dict['picture'] = None

        # set to None if last_modified_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date_time is None and "last_modified_date_time" in self.model_fields_set:
            _dict['lastModifiedDateTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "displayName": obj.get("displayName"),
            "address": Postaladdresstype.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "phoneNumber": obj.get("phoneNumber"),
            "faxNumber": obj.get("faxNumber"),
            "email": obj.get("email"),
            "website": obj.get("website"),
            "taxRegistrationNumber": obj.get("taxRegistrationNumber"),
            "currencyCode": obj.get("currencyCode"),
            "currentFiscalYearStartDate": obj.get("currentFiscalYearStartDate"),
            "industry": obj.get("industry"),
            "picture": obj.get("picture"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime")
        })
        return _obj


