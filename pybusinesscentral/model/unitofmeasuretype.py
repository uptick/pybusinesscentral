# coding: utf-8

"""
    (v2.0) Dynamics 365 Business Central

    (v2.0) Business Central Standard APIs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pybusinesscentral.model.default_dimensions import DefaultDimensions
from pybusinesscentral.model.item_category import ItemCategory
from pybusinesscentral.model.itemunitofmeasureconversiontype import Itemunitofmeasureconversiontype
from pybusinesscentral.model.picture import Picture
from typing import Optional, Set
from typing_extensions import Self

class Unitofmeasuretype(BaseModel):
    """
    Unitofmeasuretype
    """ # noqa: E501
    code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="(v1.0) The code property for the Dynamics 365 Business Central unitofmeasuretype entity")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="(v1.0) The displayName property for the Dynamics 365 Business Central unitofmeasuretype entity", alias="displayName")
    symbol: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="(v1.0) The symbol property for the Dynamics 365 Business Central unitofmeasuretype entity")
    unit_conversion: Optional[Itemunitofmeasureconversiontype] = Field(default=None, alias="unitConversion")
    picture: Optional[List[Picture]] = None
    default_dimensions: Optional[List[DefaultDimensions]] = Field(default=None, alias="defaultDimensions")
    item_category: Optional[ItemCategory] = Field(default=None, alias="itemCategory")
    __properties: ClassVar[List[str]] = ["code", "displayName", "symbol", "unitConversion", "picture", "defaultDimensions", "itemCategory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Unitofmeasuretype from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unit_conversion
        if self.unit_conversion:
            _dict['unitConversion'] = self.unit_conversion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in picture (list)
        _items = []
        if self.picture:
            for _item_picture in self.picture:
                if _item_picture:
                    _items.append(_item_picture.to_dict())
            _dict['picture'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in default_dimensions (list)
        _items = []
        if self.default_dimensions:
            for _item_default_dimensions in self.default_dimensions:
                if _item_default_dimensions:
                    _items.append(_item_default_dimensions.to_dict())
            _dict['defaultDimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of item_category
        if self.item_category:
            _dict['itemCategory'] = self.item_category.to_dict()
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if unit_conversion (nullable) is None
        # and model_fields_set contains the field
        if self.unit_conversion is None and "unit_conversion" in self.model_fields_set:
            _dict['unitConversion'] = None

        # set to None if picture (nullable) is None
        # and model_fields_set contains the field
        if self.picture is None and "picture" in self.model_fields_set:
            _dict['picture'] = None

        # set to None if default_dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.default_dimensions is None and "default_dimensions" in self.model_fields_set:
            _dict['defaultDimensions'] = None

        # set to None if item_category (nullable) is None
        # and model_fields_set contains the field
        if self.item_category is None and "item_category" in self.model_fields_set:
            _dict['itemCategory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Unitofmeasuretype from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "displayName": obj.get("displayName"),
            "symbol": obj.get("symbol"),
            "unitConversion": Itemunitofmeasureconversiontype.from_dict(obj["unitConversion"]) if obj.get("unitConversion") is not None else None,
            "picture": [Picture.from_dict(_item) for _item in obj["picture"]] if obj.get("picture") is not None else None,
            "defaultDimensions": [DefaultDimensions.from_dict(_item) for _item in obj["defaultDimensions"]] if obj.get("defaultDimensions") is not None else None,
            "itemCategory": ItemCategory.from_dict(obj["itemCategory"]) if obj.get("itemCategory") is not None else None
        })
        return _obj


