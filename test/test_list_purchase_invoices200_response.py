# coding: utf-8

"""
    (v2.0) Dynamics 365 Business Central

    (v2.0) Business Central Standard APIs

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pybusinesscentral.model.list_purchase_invoices200_response import ListPurchaseInvoices200Response

class TestListPurchaseInvoices200Response(unittest.TestCase):
    """ListPurchaseInvoices200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPurchaseInvoices200Response:
        """Test ListPurchaseInvoices200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPurchaseInvoices200Response`
        """
        model = ListPurchaseInvoices200Response()
        if include_optional:
            return ListPurchaseInvoices200Response(
                value = [
                    pybusinesscentral.model.purchase_invoice.purchaseInvoice(
                        id = '', 
                        number = '', 
                        invoice_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        vendor_invoice_number = '', 
                        vendor_id = '', 
                        vendor_number = '', 
                        vendor_name = '', 
                        pay_to_name = '', 
                        pay_to_contact = '', 
                        pay_to_vendor_id = '', 
                        pay_to_vendor_number = '', 
                        ship_to_name = '', 
                        ship_to_contact = '', 
                        buy_from_address = pybusinesscentral.model.postaladdresstype.postaladdresstype(
                            street = '', 
                            city = '', 
                            state = '', 
                            country_letter_code = '', 
                            postal_code = '', 
                            customer_financial_details = [
                                pybusinesscentral.model.customer_financial_detail.customerFinancialDetail(
                                    id = '', 
                                    number = '', 
                                    balance = 1.337, 
                                    total_sales_excluding_tax = 1.337, 
                                    overdue_amount = 1.337, )
                                ], 
                            picture = [
                                pybusinesscentral.model.picture.picture(
                                    id = '', 
                                    width = 56, 
                                    height = 56, 
                                    content_type = '', 
                                    content@odata/media_edit_link = '', 
                                    content@odata/media_read_link = '', )
                                ], 
                            default_dimensions = [
                                pybusinesscentral.model.default_dimensions.defaultDimensions(
                                    parent_id = '', 
                                    dimension_id = '', 
                                    dimension_code = '', 
                                    dimension_value_id = '', 
                                    dimension_value_code = '', 
                                    posting_validation = '', 
                                    account = pybusinesscentral.model.account.account(
                                        id = '', 
                                        number = '', 
                                        display_name = '', 
                                        category = '', 
                                        sub_category = '', 
                                        blocked = True, 
                                        last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                    dimension = pybusinesscentral.model.dimension.dimension(
                                        id = '', 
                                        code = '', 
                                        display_name = '', 
                                        last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        dimension_values = [
                                            pybusinesscentral.model.dimension_value.dimensionValue(
                                                id = '', 
                                                code = '', 
                                                display_name = '', 
                                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                            ], ), 
                                    dimension_value = pybusinesscentral.model.dimension_value.dimensionValue(
                                        id = '', 
                                        code = '', 
                                        display_name = '', 
                                        last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                                ], 
                            currency = pybusinesscentral.model.currency.currency(
                                id = '', 
                                code = '', 
                                display_name = '', 
                                symbol = '', 
                                amount_decimal_places = '', 
                                amount_rounding_precision = 1.337, 
                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            payment_term = pybusinesscentral.model.payment_term.paymentTerm(
                                id = '', 
                                code = '', 
                                display_name = '', 
                                due_date_calculation = '', 
                                discount_date_calculation = '', 
                                discount_percent = 1.337, 
                                calculate_discount_on_credit_memos = True, 
                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            shipment_method = pybusinesscentral.model.shipment_method.shipmentMethod(
                                id = '', 
                                code = '', 
                                display_name = '', 
                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            payment_method = pybusinesscentral.model.payment_method.paymentMethod(
                                id = '', 
                                code = '', 
                                display_name = '', 
                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                        pay_to_address = pybusinesscentral.model.postaladdresstype.postaladdresstype(
                            street = '', 
                            city = '', 
                            state = '', 
                            country_letter_code = '', 
                            postal_code = '', ), 
                        ship_to_address = , 
                        currency_id = '', 
                        currency_code = '', 
                        prices_include_tax = True, 
                        discount_amount = 1.337, 
                        discount_applied_before_tax = True, 
                        total_amount_excluding_tax = 1.337, 
                        total_tax_amount = 1.337, 
                        total_amount_including_tax = 1.337, 
                        status = '', 
                        last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        purchase_invoice_lines = [
                            pybusinesscentral.model.purchase_invoice_line.purchaseInvoiceLine(
                                id = '', 
                                document_id = '', 
                                sequence = 56, 
                                item_id = '', 
                                account_id = '', 
                                line_type = '', 
                                line_details = pybusinesscentral.model.documentlineobjectdetailstype.documentlineobjectdetailstype(
                                    number = '', 
                                    display_name = '', 
                                    item = pybusinesscentral.model.item.item(
                                        id = '', 
                                        number = '', 
                                        display_name = '', 
                                        type = '', 
                                        item_category_id = '', 
                                        item_category_code = '', 
                                        blocked = True, 
                                        base_unit_of_measure_id = '', 
                                        base_unit_of_measure = pybusinesscentral.model.unitofmeasuretype.unitofmeasuretype(
                                            code = '', 
                                            display_name = '', 
                                            symbol = '', 
                                            unit_conversion = pybusinesscentral.model.itemunitofmeasureconversiontype.itemunitofmeasureconversiontype(
                                                to_unit_of_measure = '', 
                                                from_to_conversion_rate = 1.337, 
                                                item_category = pybusinesscentral.model.item_category.itemCategory(
                                                    id = '', 
                                                    code = '', 
                                                    display_name = '', 
                                                    last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                                            item_category = pybusinesscentral.model.item_category.itemCategory(
                                                id = '', 
                                                code = '', 
                                                display_name = '', 
                                                last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ), 
                                        gtin = '', 
                                        inventory = 1.337, 
                                        unit_price = 1.337, 
                                        price_includes_tax = True, 
                                        unit_cost = 1.337, 
                                        tax_group_id = '', 
                                        tax_group_code = '', 
                                        last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        item_category = , ), ), 
                                description = '', 
                                unit_of_measure = pybusinesscentral.model.unitofmeasuretype.unitofmeasuretype(
                                    code = '', 
                                    display_name = '', 
                                    symbol = '', ), 
                                unit_cost = 1.337, 
                                quantity = 1.337, 
                                discount_amount = 1.337, 
                                discount_percent = 1.337, 
                                discount_applied_before_tax = True, 
                                amount_excluding_tax = 1.337, 
                                tax_code = '', 
                                tax_percent = 1.337, 
                                total_tax_amount = 1.337, 
                                amount_including_tax = 1.337, 
                                invoice_discount_allocation = 1.337, 
                                net_amount = 1.337, 
                                net_tax_amount = 1.337, 
                                net_amount_including_tax = 1.337, 
                                expected_receipt_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                item = pybusinesscentral.model.item.item(
                                    id = '', 
                                    number = '', 
                                    display_name = '', 
                                    type = '', 
                                    item_category_id = '', 
                                    item_category_code = '', 
                                    blocked = True, 
                                    base_unit_of_measure_id = '', 
                                    gtin = '', 
                                    inventory = 1.337, 
                                    unit_price = 1.337, 
                                    price_includes_tax = True, 
                                    unit_cost = 1.337, 
                                    tax_group_id = '', 
                                    tax_group_code = '', 
                                    last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                            ], 
                        pdf_document = [
                            pybusinesscentral.model.pdf_document.pdfDocument(
                                id = '', 
                                content = bytes(b'blah'), )
                            ], 
                        vendor = pybusinesscentral.model.vendor.vendor(
                            id = '', 
                            number = '', 
                            display_name = '', 
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            state = '', 
                            country = '', 
                            postal_code = '', 
                            phone_number = '', 
                            email = '', 
                            website = '', 
                            tax_registration_number = '', 
                            currency_id = '', 
                            currency_code = '', 
                            irs1099_code = '', 
                            payment_terms_id = '', 
                            payment_method_id = '', 
                            tax_liable = True, 
                            blocked = '', 
                            balance = 1.337, 
                            last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        currency = pybusinesscentral.model.currency.currency(
                            id = '', 
                            code = '', 
                            display_name = '', 
                            symbol = '', 
                            amount_decimal_places = '', 
                            amount_rounding_precision = 1.337, 
                            last_modified_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ]
            )
        else:
            return ListPurchaseInvoices200Response(
        )
        """

    def testListPurchaseInvoices200Response(self):
        """Test ListPurchaseInvoices200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
